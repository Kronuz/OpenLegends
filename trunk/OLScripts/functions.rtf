{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1053\deflangfe1053{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f36\froman\fcharset238\fprq2 Times New Roman CE;}{\f37\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f39\froman\fcharset161\fprq2 Times New Roman Greek;}{\f40\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f41\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f42\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f43\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f44\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\f46\fswiss\fcharset238\fprq2 Arial CE;}{\f47\fswiss\fcharset204\fprq2 Arial Cyr;}{\f49\fswiss\fcharset161\fprq2 Arial Greek;}{\f50\fswiss\fcharset162\fprq2 Arial Tur;}{\f51\fswiss\fcharset177\fprq2 Arial (Hebrew);}
{\f52\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f53\fswiss\fcharset186\fprq2 Arial Baltic;}{\f54\fswiss\fcharset163\fprq2 Arial (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 \snext0 Normal;}{
\s1\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\f1\fs32\lang1053\langfe1053\kerning32\cgrid\langnp1053\langfenp1053 \sbasedon0 \snext0 heading 1;}{
\s2\ql \li1304\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin1304\itap0 \b\i\f1\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 \sbasedon0 \snext0 heading 2;}{
\s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 \sbasedon0 \snext0 heading 3;}{
\s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 \sbasedon0 \snext0 heading 4;}{
\s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 \sbasedon0 \snext0 heading 5;}{
\s6\ql \li6520\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel5\adjustright\rin0\lin6520\itap0 \b\fs22\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 \sbasedon0 \snext0 heading 6;}{
\s7\ql \li0\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel6\adjustright\rin0\lin0\itap0 \fs24\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 \sbasedon0 \snext0 heading 7;}{
\s8\ql \li0\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel7\adjustright\rin0\lin0\itap0 \i\fs24\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 \sbasedon0 \snext0 heading 8;}{
\s9\ql \li0\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel8\adjustright\rin0\lin0\itap0 \f1\fs22\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 \sbasedon0 \snext0 heading 9;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}{\*\latentstyles\lsdstimax156\lsdlockeddef0}{\*\pgptbl {\pgp\ipgp0\itap0\li0\ri0\sb0\sa0
}}{\*\rsidtbl \rsid22698\rsid1445693\rsid1445807\rsid1658300\rsid1989465\rsid2644005\rsid2756897\rsid3624634\rsid4210788\rsid4882120\rsid5792579\rsid6241226\rsid6364143\rsid6388060\rsid6698988\rsid7170938\rsid8464210\rsid8803335\rsid9138751\rsid9765749
\rsid10309882\rsid10503070\rsid10556965\rsid10909763\rsid12131289\rsid12660966\rsid12806715\rsid13112984\rsid13507912\rsid13834887\rsid14041964\rsid14185799\rsid14838359\rsid15366061\rsid15621604\rsid15863671\rsid15946097\rsid16017058\rsid16189398}
{\*\generator Microsoft Word 11.0.5604;}{\info{\title Function listings}{\author Linus M\'e5rtensson}{\operator Linus M\'e5rtensson}{\creatim\yr2005\mo8\dy10\hr19\min39}{\revtim\yr2005\mo8\dy12\hr1\min5}{\version41}{\edmins115}{\nofpages20}{\nofwords3864}
{\nofchars20483}{\*\company Elplan-GM}{\nofcharsws24299}{\vern24689}}\paperw11906\paperh16838\margl0\margr0\margt1417\margb1417 
\deftab1304\widowctrl\ftnbj\aenddoc\hyphhotz420\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1701\dgvorigin1984\dghshow1\dgvshow1
\jexpand\viewkind4\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\viewnobound1\snaptogridincell\allowfieldendsel
\wrppunct\asianbrkrule\rsidroot12806715\newtblstyruls\nogrowautofit \fet0\sectd \linex0\headery708\footery708\colsx708\endnhere\pgbrdropt32\sectlinegrid360\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \s1\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\ipgp1 \b\f1\fs32\lang1053\langfe1053\kerning32\cgrid\langnp1053\langfenp1053 {
\lang2057\langfe1053\langnp2057\insrsid12806715 New OL script system
\par }\pard\plain \s2\ql \li1304\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin1304\itap0\ipgp1 \b\i\f1\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
NOTE: While this list matches the functions that will be used in Open Legends and the relations thereof, it does not match which header files they will be placed in. This is not as vital at its current state.
\par Version 1001 \endash  Entity list finalized and converted from old OZ script system, further revisions may be required
\par NameStandards
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Enum identifiers and names for Values/Strings used by the engine are prepended with _ and all in non-caps. Ex: _movedeg
\par Flag names used by Open Legends are all in caps. Ex: NORESET
\par }\pard\plain \s2\ql \li1304\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin1304\itap0\ipgp1 \b\i\f1\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Core functions
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Output

\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
printf(format[], \'85); //Print to file and debug window (if available)
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
String functions
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
strlen(const string[]);
\par strcmp(const string1[], const string2[]);
\par strcpy(const dest[], const source[]);
\par strcat(const dest[], cont source[]);
\par tolower(string[]);
\par toupper(string[]);
\par swapchars(string[]);
\par itoa(integer, array[], base);
\par atoi(array[], integer);
\par Is more needed here?
\par }\pard\plain \s2\ql \li1304\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin1304\itap0\ipgp1 \b\i\f1\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Entity functions
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Data storage

\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Variables

\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
veSetValue(EntityID[], ValueID, Value);
\par veIncValue(EntityID[], ValueID, Value);
\par veGetValue(EntityID[], ValueID); //Returns Value.
\par veLimitValue(EntityID[], ValueID, min, max);
\par seSetValue(EntityID[], const ValueID[], Value);  // Uses strings instead of values.
\par }\pard\plain \s6\ql \li6520\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel5\adjustright\rin0\lin6520\itap0\ipgp1 \b\fs22\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
_movedeg, _movedir and _moverad are pre-set and interlocked. Modify one and the others update accordingly. _speed is also preset, as well as _x, _y and _groupid. _ix and _iy are the initial locations of the entity.
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
seIncValue(EntityID[], ValueID[], Value);
\par seGetValue(EntityID[], const ValueID[]);  // Uses strings instead of values.
\par seLimitValue(EntityID[], ValueID[], min, max);
\par veSetFloat(EntityID[], FloatID, float);
\par veIncFloat(EntityID[], FloatID, float);
\par veGetFloat(EntityID[], FloatID);
\par veLimitFloat(EntityID[], FloatID, min, max);
\par seSetFloat(EntityID[], const FloatID[], float);
\par seIncFloat(EntityID[], FloatID[], float);
\par seGetFloat(EntityID[], const FloatID[]);
\par seLimitFloat(EntityID[], FloatID[], min, max);
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Strings
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
veSetString(EntityID[], StringID, String[]);
\par veGetString(EntityID[], StringID, &String[]);
\par seSetString(EntityID[], const StringID[], String[]);//Uses strings instead of values.
\par seGetString(EntityID[], const StringID[], &String[]);//Uses strings instead of values.
\par Is AllocateStrings required, or can we do this dynamically?
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\insrsid12806715 MultiDimensional Strings
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\insrsid12806715 veSetStringMD(E}{\insrsid16189398 
ntityID[], StringID, StringID2, }{\insrsid1445807 &}{\insrsid12806715 String[]);
\par veGetStringMD(EntityID[], StringID, StringID2, String[]);
\par }{\lang2057\langfe1053\langnp2057\insrsid12806715 This will probably have little use in most circumstances, but should add some extra data-storage capabilities in Multiplayer environments.}{\lang2057\langfe1053\langnp2057\insrsid6364143 
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1\pararsid6364143 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid6364143 
Entity Storage
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1\pararsid6364143 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid6364143 
veStoreEntity(EntityID[], StoredEntity, TargetEntity[]);
\par veLoadEntity(EntityID[], StoredEntity, TargetEntity[]);}{\lang2057\langfe1053\langnp2057\insrsid12806715 
\par }{\lang2057\langfe1053\langnp2057\insrsid6364143 seStoreEntity(EntityID[], StoredEntity[], TargetEntity[]);
\par }\pard \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1\pararsid15946097 {\insrsid6364143\charrsid15946097 seLoadEntity(EntityID[], StoredEntity[], TargetEntity[]);
\par }\pard \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1\pararsid6364143 {\lang2057\langfe1053\langnp2057\insrsid6364143 These functions copy all the data for an entity into a storage 
location inside another entity. This is an efficient way to store entities for copies and other actions, but is mainly implemented fo}{\lang2057\langfe1053\langnp2057\insrsid10909763 r database storage for multiplayer}{
\lang2057\langfe1053\langnp2057\insrsid6364143  quest}{\lang2057\langfe1053\langnp2057\insrsid10909763 s}{\lang2057\langfe1053\langnp2057\insrsid6364143 .
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {
\lang2057\langfe1053\langnp2057\insrsid12806715\charrsid6364143 Flags
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715\charrsid6364143 
veSetFlag(EntityID[], Flag, bool flagstate);
\par veGetFlag(EntityID[], Flag);
\par seSetFlag(EntityID[], Flag[], bool flagstate)}{\insrsid12806715 ;
\par }\pard \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1\pararsid6364143 {\lang2057\langfe1053\langnp2057\insrsid12806715 seGetFlag(EntityID[], Flag[]);}{
\lang2057\langfe1053\langnp2057\insrsid6364143 
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Variables and Strings should be locked if the PROTECTED flag is set.
\par The flag GPROTECTED locks against all modifications from outside the entity.
\par The first letter in the data storage functions indicates [v]alue/[s]tring, second letter indicates [e]ntity/[s]prite (the s functions aren\rquote t listed, seeing as only 1 letter is changed. They are however all constants and do not use the \lquote Set
\rquote  functions.
\par All Set functions return true on succe}{\lang2057\langfe1053\langnp2057\insrsid2756897 ss. GetString functions return strlen if there is data in the string, otherwise 0.}{\lang2057\langfe1053\langnp2057\insrsid12806715 
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Positioning

\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
GetPosition(&X, &Y=NULL, &GroupID=NULL); //Null if not retrieved. This refers to _x, _y and _groupid in Set/GetValue
\par SetPosition(X, Y=NULL, GroupID=NULL); //NULL if one stays the same. This refers to _x, _y and _groupid in Set/GetValue
\par AngleMove(EntityID[]);
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Modifies X & Y coordinates based on _movedeg & _speed from GetValue();
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
CalculateAngle(x1, y1, x2, y2); //Calculates an angle between two points and returns it in degrees.
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Entity Handling
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
DeleteEntity(EntityID[]);
\par CreateEntity(&EntityID[], EntityType[]);
\par CreateEntityWithID(EntityID[], EntityType[]);
\par GetEntityID(&RetrievedID[]); //Special case, returns name used by special identifier \'93this\'94.
\par GetParent(EntityID[]); //returns parent entity
\par Reset(EntityID[], ResetTo=_beginning);
\par ResetAll(ResetTo=_beginning, ResetAll=true); //Resets all entities to the state they were at on the last load/save, this includes removing/creating entities that do not exist or have been d
eleted. Skips entities with the flag NORESET at true unless ResetAll is true.
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Enum ResetPoint\{
_lastsave, _beginning\};
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
GetParam(EntityID[]); //Retrieves a parameter used at entity creation, marked as wildcard(#) in entity name, ex: entity#.zes
\par GetEntityCount(bool inWorld=true); //Retrieves entity count in the whole world. false retrieves in current group.
\par }\pard \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1\pararsid2644005 {\lang2057\langfe1053\langnp2057\insrsid2644005 EntityExist(EntityID[]);}{
\lang2057\langfe1053\langnp2057\insrsid2644005\charrsid2644005 
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Collision detection
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Collide(Entity1[], RectID1, Entity2[], RectID2=-1); // checks for a collision between the two objects rectangles. RectID2=-1 indicates all rectangles are checked.
\par CollidePoint(EntityID[], RectID, x, y); //Checks for a collision between the entity and the point.
\par 
\par CheckCollide(EntityID[], RectID, &ArrayID); //This creates an array of entities this object collided with. Returns false if there weren\rquote t any collisions. (The Array should still be deleted.)
\par CheckAngle(x1, y1, x2, y2, &ArrayID); //This creates an array of entities between the two points. Returns false if there weren\rquote t any collisions. (The Array should still be deleted.)
\par GetNextCollision(ArrayID); //This increments the array pointer returned in CheckCollide.
\par GetCollision(ArrayID, &EntityID[]); //This retrieves the entity checked in CheckCollide.
\par DeleteCollisionCheck(ArrayID=-1); //This removes the array and restores memory. This is done at the end of a frame if not done manually.
\par 
\par CheckMask(x, y); //Returns mask value for coordinate.
\par SetCollisionRect(EntityID[], RectID, top, left, bottom, right); //The collision rectangle should exist until deleted or updated.
\par ClearCollisionRect(EntityID[], RectID=-1); //-1 equals all collision rectangles.
\par 
\par NearPoint(x1, y1, x2, y2, distance); //Returns true if the coordinates are within range of each other.
\par 
\par CheckBoundaryCollisionOnMove(EntityID[], XOffset, YOffset, bool quickcheck=false); //Checks if this entity will collide with the boundary if AngleMove() is used in the current state. quickcheck=true means only the end point will be checked.
\par 
\par CheckMaskCollisionOnMove(EntityID[], X
Offset, YOffset, &ArrayID, bool quickcheck=false); //Checks if this entity will collide with any masks if AngleMove() is used in the current state. quickcheck=true means only the endpoint will be checked. Returns false if there are no collisions, the arra
y must still be deleted however.
\par NextMaskCollision(ArrayID); //Increments position in Array of mask collisions.
\par GetMaskCollision(ArrayID); //Returns the value of the mask.
\par DeleteMaskCollisionCheck(ArrayID); //Deletes the mask array.
\par }\pard \s4\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin0\itap0\ipgp1 {\lang2057\langfe1053\langnp2057\insrsid12806715 
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Entity Interaction
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Call
Function(EntityID[], isLibrary, FunctionName, \'85); //This function requires improvements considering how the old version worked. If possible: Remove requirement for a string denoting string/integer and allow for conversion of \'93this\'94
 to entity name.
\par CreateEntityList(&ArrayID, x, y, maxdist); //Returns entities in area to an array referred to as ArrayID.
\par NextEntity(ArrayID); //Increments the array position
\par GetEntity(ArrayID, &EntityID[]); //Returns the array data for the current position.
\par DeleteEntityList(ArrayID); //Deletes the Array.
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
NPC speech handling
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
These functions are externals, but placed here for consistency.
\par MessageMap(EntityID[], MessageID, Text[], bool gotoNextMessage, \'85); //This function will use the multi dimensional strings storage method, Messag
eID is the ID of the message which will be said, Text is the text, gotoNextMessage is wether or not the text will auto-continue, \'85 is the ID of the possible next messages.
\par GetCurrentMessage(EntityID[]);  //Returns id of current message
\par GetGotoNextMessage(EntityID[], MessageID); //Returns true if we should continue directly to the next message
\par GetNumNextMessages(EntityID[], MessageID); //Returns number of possible alternatives resulting from this one.
\par }\pard\plain \s2\ql \li1304\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin1304\itap0\ipgp1 \b\i\f1\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
General functions
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Input
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 GetKey(KeyID);

\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 enum keys \{
up,down,left,right,action1,action2,action3,action4,start\}   //This might require a more extensive library of input possibilities.
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
GetMousePosition(&X, &Y, CoordType = _groupcoords);
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 enum coordtypes \{
_groupcoords, _screencords\}
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
GetMouseInput();  //Definition for this?
\par GetKeyboardInput(); //Raw input from keyboard, for writing stuff or if custom in-game keys are set.}{\lang2057\langfe1053\langnp2057\insrsid12660966  Is placed in a frame-by-frame stream}{\lang2057\langfe1053\langnp2057\insrsid10503070 .}{
\lang2057\langfe1053\langnp2057\insrsid12660966  (}{\lang2057\langfe1053\langnp2057\insrsid10503070 U}{\lang2057\langfe1053\langnp2057\insrsid12660966 nless there is a better method when we\rquote re working with scripts?)}{
\lang2057\langfe1053\langnp2057\insrsid12806715 
\par stock EnableControls(bool enable=true); //false disables controls.
\par stock DisableControls(bool disable=true); //false enables controls
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Misc
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Pause
(paused);  //Should stop all entities without the \'93UNPAUSABLE\'94 flag set to true.
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Save/Load

\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Save(SaveID, 
\'85);
\par Load(LoadID);
\par ListLoad(&LoadList[]); //LoadList is a 2-dimensional array containing the data set in Save after SaveID, in the same order. Used for load screens.
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Sound
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
CreateSound(&SoundID[], Volume, SoundName[]);
\par CreateSoundWithID(SoundID[], Volume, SoundName[]);
\par SetSoundVolume(Volume);
\par PlaySound(SoundID[]);
\par StopSound(SoundID[]);
\par DeleteSound(SoundID[]);
\par This merges Sound and Music into a single function, the creating functions will handle the sound format as well as the filename and type. You just give it the name with extension, then refer to it through the SoundID[].
\par }\pard\plain \s2\ql \li1304\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin1304\itap0\ipgp1 \b\i\f1\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Float functions
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Unlisted.

\par }\pard\plain \s2\ql \li1304\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin1304\itap0\ipgp1 \b\i\f1\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Sprite/Animation/Drawing functions
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Animations

\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
CreateAnim(&AnimID[], speed);
\par CreateAnimWithFrames(&AnimID[], speed, Frames[]); //Assumes 0,0 position on all frames. (2D array)
\par CreateAnimWithID(AnimID[], speed);
\par CreateAnimWithFramesAndID( AnimID[], speed, Frames[]);
\par AddFrame(AnimID[], x, y, SpriteID[]);
\par SetAnimSpeed(AnimID[], speed);
\par SetAnimLoop(AnimID[], doesloop);
\par GetAnimFrameCount(AnimID[]);
\par SetAnimFrame(AnimID[], frame);
\par GetAnimCurrentFrame(AnimID[]);
\par FinishedAnim(AnimID[]);  //returns whether or not a non-looping animation is finished.
\par GetAnimFrameImage(AnimID[], frame, &Sprite[]);
\par SetAnimDirection(AnimID[], direction);  //1,0,-1 (forward, nothing, backward)
\par DeleteAnim(AnimID[]);
\par DrawAnim(AnimID[], coordType, x, y);
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Sprites

\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
DrawSprite(SpriteID[], coordType, x, y);
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
SpriteMod //These should work for both sprites/spritesets and animations, this may require 2 or more functions for each function
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
CopySprite(SpriteID[], &Sprite[]);
\par ModSpriteSize(SpriteID[], width, height);
\par ModSpriteArea(SpriteID[], width=-1, height=-1); //The area to draw the sprite over, -1 to reset to SpriteSize.
\par ModSpriteColor(SpriteID[], red, green, blue, alpha);
\par ModSpriteRotate(SpriteID[], degrees);
\par Etc\'85?
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
SpriteData //These should work for both sprites/spritesets and animations, this may require 2 or more functions for each function
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 GetW
idth(SpriteID[]); //whole set, widest anim sprite
\par GetHeight(SpriteID[]); //whole set, tallest anim sprite
\par GetSpriteArea(SpriteID[], &width, &height);
\par A sprite should have data stored
 using the entity data storage functions, only pre-pended with vs/ss instead of ve/se, indicating that we are working with [s]prites. All sprite data is constants. (This allows for some basic interaction based on collision detection using sprite data inst
ead of masks)
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Vectors & Text
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
DrawText(Text[], x, y, size=9, red=255, green=255, blue=255, alpha=255);
\par DrawBitmapText(Text[], x, y, Prepend[], float size=1.0, red=255, green=255, blue=255, alpha=255);
\par CreateTextObject(ObjectID[], Text[], Prepend[]); //This creates an object modifiable using the SpriteMod functions and drawable using the DrawSprite() function.
\par DrawRectangle(x1, y1, x2, y2, red=255, green=255, blue=255 alpha=255); //Creates a rectangle filled with the rgba color specified.
\par DrawLine(x1, y1, x2, y2, red=255, green=255, blue=255, alpha=255); //Creates a line between the two points using the rgba color specified.
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 TextBoxes

\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Should these be externals? (scripts?)
\par InitTextBox(&TextBoxID, x1, y1, x2, y2);
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1\pararsid14838359 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
The old QD used special characters to indicate question answers, is this still viable or is a better solution necessary?}{\lang2057\langfe1053\langnp2057\insrsid14838359 
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
SetTextBoxText(TextBoxID, Text[]);
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Should text be modifiable during display?
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
DisplayTextBox(TextBoxID);
\par GetAnswer(TextBoxID = -1); //0 for no answer, finished text box returns 1 or answer.
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Null means any text box that finished on the last frame.
\par A non-null value does not reset until ResetTextBox(); or DeleteTextBox();
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
ResetTextBox(TextBoxID);
\par DeleteTextBox(TextBoxID);
\par SetTextBoxBorderPrepend(Prepend[], TextBoxID=-1); //-1 sets it globally, after prepend comes n, ne, nw, e, w, sw, s, se.
\par }\pard\plain \s2\ql \li1304\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin1304\itap0\ipgp1 \b\i\f1\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
World functions
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Positioning

\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
UpdateWorldCoords(X, Y=NULL, GroupID=NULL);   //Null should be available to allow a coordinate to stay the same.
\par GetWorldCoords(&X, &Y=NULL, &GroupID=NULL);   //Null should be available.
\par Wipe(CurrentGroupID, Direction);   //Returns new GroupID
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
World data storage
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Access pre-named entity \'93_world\'94 \endash  This is an effort to remove the boundaries between entities and generalise functions.
\par Access pre-named entity \'93_group\'94 for local data, this entity will be deleted and re-created on Wipe(); the value _groupid also stores a unique identifier for the current group.
\par Counter functions are handled by \'93_world\'94 in the same way as globals, these are now merged.
\par Sizes in the world, like width, height and absolute position is stored in GetValue(\'93_world\'94/\'94_group\'94, \'93_width\'94/\'94_height\'94/\'94_x\'94/\'94_y\'94
); These values are protected, and cannot be modified using SetValue. (Is it possible to make sure this is checked on compiler level? Or some kin
d of intelligent bug detection? Otherwise it should ignore a set called for these preset value identifiers in the game engine, possibly causing a pre-emptive assertion error about write to protected entity)
\par }\pard\plain \s2\ql \li1304\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin1304\itap0\ipgp1 \b\i\f1\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
External Functions
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
These are functions that simplify the scripting process, it includes functions that created using script functions instead of accessing a native function. It also includes \'93#define\'94 functions.
\par FirstRun
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
#define FirstRun() (seGetValue(\'93this\'94, \'93_firstrun\'94)) ? \\
\par seSetValue(\'93this\'94, \'93_firstrun\'94, false) : false
\par }\pard \s4\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin0\itap0\ipgp1 {\lang2057\langfe1053\langnp2057\insrsid12806715 
\par }\pard \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 {\lang2057\langfe1053\langnp2057\insrsid12806715 The _firstrun value is pre-defined and set to \lquote true\rquote 
 at entity creation.
\par }\pard\plain \s2\ql \li1304\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin1304\itap0\ipgp1 \b\i\f1\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Obsolete

\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Holes
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
SetLowerLevel();
\par GetLowerlevelX();
\par GetLowerLevelY();
\par Holes will be handled as entities.
\par This will allow us to make use of the existing collision detection functions and will also allow for a more dynamic setup of holes.
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Day/Night functions
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
These are useless and have been left over to the script system and the filters to handle.
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
FadeTo  //New filter system
\par SetRestartTable  //Scriptable
\par SetRestartPoint  //Scriptable
\par ClearRestartTable //Scriptable
\par GameOver //Scriptable
\par ChangeDirection  //Useless
\par SetActiveDist  //Useless
\par AngleCollide(Dist, NumPoints, MaxDetect, Holes, XOffset, YOffset); //Unusable in new script system.
\par GetAnglePointX() //Useless(?)
\par GetAnglePointY() //Useless(?)
\par core.inc
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
I have no idea what these are for, so I\rquote m placing them here unless someone has a better idea. Random, min, max & clamp should be in the math library.
\par heapspace();
\par funcidx(const name[]);
\par numargs();
\par getarg(arg, index=0);
\par setarg(arg, index=0, value);
\par strpack(dest[], const source[]);
\par strunpack(dest[], const source[]);
\par }{\insrsid12806715 random(max);
\par min(val1, val2);
\par }{\lang2057\langfe1053\langnp2057\insrsid12806715 max(val1, val2);
\par clamp(val, min=cellmin, max=cellmax);
\par getproperty(id=0, const name[]=\'94\'94, value=cellmin, string[]=\'94\'94);
\par setproperty(id=0, const name[]=\'94\'94, value=cellmin, const string[]=\'94\'94);
\par deleteproperty(id=0, const name[]=\'94\'94, value=cellmin);
\par existproperty(id=0, const name[]=\'94\'94, value=cellmin);
\par }\pard\plain \s2\ql \li1304\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin1304\itap0\ipgp1 \b\i\f1\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Multiplayer setup
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
THIS IS A SKETCH AND A BRAINSTORM, nothing else.
\par Flags
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 MULTIPLAYER

\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Th
is flag is set in the _world entity for a multiplayer quest. This indicates that a server connection must be made for the quest to function correctly and activates the usage of the DUMMY flags.
\par This flag requires the string _host to be set to the server ip/domain and the value _port to be set to the connection port. The value _packetfrequency sets a packet/second variable. These variables can also be set up using SetConnection.
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 SERVER
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 This flag i
s set for entities that only exist on the server. These may be used to handle, for example, a user database, which would maintain, among others, a list of uniqueID\rquote s and usernames. (PCDUMMY entities)
\par If possible, only use a single SERVER flagged entity to avoid confusion.
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 UNIQUE
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
This flag is set for entities which are unique based on the client. Their data is communicated only between the server and the client owning it. Optimally used for logon.
\par These entities are created dynamically and should NOT be created in a quest editor.
\par As for DUMMY flagged entities, main() is used by the server, and Local() is used by the client.
\par }\pard \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1\pararsid6241226 {\lang2057\langfe1053\langnp2057\insrsid16017058 _ownerip stores IP of owner, if changed, owner changes.}{
\lang2057\langfe1053\langnp2057\insrsid6241226 
\par }\pard \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 {\lang2057\langfe1053\langnp2057\insrsid16017058 These are delete}{\lang2057\langfe1053\langnp2057\insrsid7170938 
d when the connection is closed if not before.}{\lang2057\langfe1053\langnp2057\insrsid16017058 
\par }{\lang2057\langfe1053\langnp2057\insrsid12806715 Try to keep the existence of these to a minimum}{\lang2057\langfe1053\langnp2057\insrsid22698 .}{\lang2057\langfe1053\langnp2057\insrsid12806715 
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 DUMMY
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
This flag is set for entities that are created by a server, it should be set for all entities in a multiplayer quest which require server interaction.
\par For all entities with the DUMMY flag set and the MULTIPLAYER flag set in _world, the main() function will only be called from the server. The Dummy() function will be called locally, and should only draw the entity in it\rquote s current state.
\par These entities, along with the PCDUMMY flagged entities are a larger part of the server \endash  client load.
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 NPCDUMMY
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
This updates the entity data only once on group entry. The Dummy() f
unction is then used to control it. This allows the entity to move around without having it become a data hog on the server, but still allowing it to contain area specific data. If it is critical that the entity stays updated and matches the server data, 
use the DUMMY flag.
\par Entities of this type relieve some server load
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 PCDUMMY
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
This flag indicates a player character in a multiplayer game. This entity acts as a DUMMY on all clients except the owner client and the server. It makes use of the Dummy(); and the 
Local(); functions to handle drawing and data operations. The main() function is called by the server. Entities with this}{\lang2057\langfe1053\langnp2057\insrsid9765749  flag are stored on the server.}{\lang2057\langfe1053\langnp2057\insrsid12806715 

\par }{\lang2057\langfe1053\langnp2057\insrsid6698988 The owner ip is stored in _ownerip. If changed, owner changes.
\par }{\lang2057\langfe1053\langnp2057\insrsid9765749 If the connection disappears, the PCDUMMY flagged entity will call Kill(); in the script and upon finish delete itself.
\par }{\lang2057\langfe1053\langnp2057\insrsid12806715 These entities, along with the DUMMY flagged entities are a larger part of the server \endash  client load.
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
If none of the above flags are set, the entity is local and has no interaction with the server whatsoever. The _group and _world entity behaviour is undefined if any multiplayer other than the MULTIPLAYER flag in _world is set.
\par UPDATE
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
This makes sure a DUMMY entity is updated even if there is no users active in the area and may be useful for overhead control entities. However, these may create a bottleneck for network performance, so try to keep usage low.
\par }\pard\plain \s4\ql \li5216\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin5216\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
An entity should NOT do any server communication until a FirstRun() has been made to determine how it works. (flags)
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1\pararsid12131289 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {
\lang2057\langfe1053\langnp2057\insrsid12131289 Values}{\lang2057\langfe1053\langnp2057\insrsid15863671 /Strings}{\lang2057\langfe1053\langnp2057\insrsid12131289 
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1\pararsid12131289 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {
\lang2057\langfe1053\langnp2057\insrsid12131289 _world :: _uniqueID
\par PCDUMMY :: _uniqueID
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1\pararsid12131289 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12131289 
These two should match for the Local(); function to be called in the PCDUMMY flagged entity. A Local(); called made if they don\rquote }{\lang2057\langfe1053\langnp2057\insrsid10309882 t match}{\lang2057\langfe1053\langnp2057\insrsid12131289 
 should be ignored by the server on an IP based check.}{\lang2057\langfe1053\langnp2057\insrsid14185799  This is required as all players will have access to all _uniqueID\rquote s, even though not first-hand, but in the data storage.}{
\lang2057\langfe1053\langnp2057\insrsid12131289 
\par }{\lang2057\langfe1053\langnp2057\insrsid15366061 It may be possible to do this on the script side, in the Dummy(); function.
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Script DUMMY Functions
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 void Dummy();

\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
This is a per-frame function called for all DUMMY flagged entities, it should have no return values and no parameters. Normally, all it should do is draw an entity at coordinates _x, _y based on any specific state it is in.
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 void Local();

\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
This is a per-frame function called for PCDUMMY entities on the local client of the owner. It should normally handle only input. Drawing should be done in Dummy();
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1\pararsid9765749 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid9765749 
Void Kill();
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1\pararsid9765749 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid9765749 
This is used as a pre-remove function in a PCDUMMY entity to allow for saving of variables in an external location.
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Local Multiplayer Core Functions
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
RequestData(UniqueID[]); 
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Retrieves a list of entities for the current group based on a certain update rate. This decrements entity data usage on the server side by 1 for the last group, and increments by 1 for the new group.
\par If the connection to a client is lost, the entity data usage is decremented by 1.
\par If a group reaches 0 in entity data usage, it will be set as inactive, and any entities in it without the UPDATE flag set will be placed in an idle mode where their main(); function is not called.
\par Also does what UpdateData(); does.
\par This function should be called on group entry (FirstRun();)
\par }\pard\plain \s4\ql \li5216\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin5216\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
UpdateData(UniqueID[]);
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
This function is called to send data for the owned PCDUMMY to the server. It also makes a request for new data to be sent using SendGroupEntityData.
\par An active group sends its data to all corresponding entities on the client side, and creates any entities that do not exist on the client side, giving them the correct data. 
\par This function should be called on frame basis after the first frame in a group, actual updating should then be handled by the OL kernel.
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
SetConnection(Host[], Port, PacketFrequency); //Sets the connection data in _world
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
This is equal to setting up the individual variables in _world.
\par Modifies string : _host | variable : _port , _packetfrequency
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
CreateConnection(}{\lang2057\langfe1053\langnp2057\insrsid13834887 &UniqueID[]}{\lang2057\langfe1053\langnp2057\insrsid12806715 ); //Creates the connection to the server.
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid8803335 Returns}{
\lang2057\langfe1053\langnp2057\insrsid14041964  a}{\lang2057\langfe1053\langnp2057\insrsid8803335  UniqueID}{\lang2057\langfe1053\langnp2057\insrsid1989465  in UniqueID}{\lang2057\langfe1053\langnp2057\insrsid8803335  on success.}{
\lang2057\langfe1053\langnp2057\insrsid12806715 
\par }{\lang2057\langfe1053\langnp2057\insrsid1989465 Returns 1 on success.
\par }{\lang2057\langfe1053\langnp2057\insrsid12806715 Return 0 on failure.
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
KillConnection(); //Kills the server connection.
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
If not called by a script, this should be called internally for a MULTIPLAYER flagged quest.
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Server Multiplayer Functions
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
SendGroupEntityData(UniqueID[], isRequested)}{\lang2057\langfe1053\langnp2057\insrsid1658300  (This is a core function which requires more access than is logically possible in the SMALL language. It must be done by the OL Kernel.)}{
\lang2057\langfe1053\langnp2057\insrsid12806715 
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
This function should send all data for DUMMY entities in the group to the user, if it is a request, NPCDUMMY entities should also be updated. (on group entry)
\par  If there is a new entity entering the group or being created in it (probably a PCDUMMY), it should be sent and created by the client as well.
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
ListenForConnections(EntityType[], &ip[], &EntityID[]);
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
This function will listen for and accept client connections to the server and create a UNIQUE flagged entity which will handle connection between them when created up until the point when it is linked to a PCDUMMY flagged entity.
\par EntityID[] is used for the UNIQUE flagged entity name and only the ip used for connection creation can access it.
\par }\pard \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1\pararsid10556965 {\lang2057\langfe1053\langnp2057\insrsid10556965 The ip of the entity that created it is stored in \'93_ownerip\'94
 and will not be modifiable.
\par }\pard \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 {\lang2057\langfe1053\langnp2057\insrsid3624634 Returns true when a connection is made.
\par }\pard \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1\pararsid3624634 {\lang2057\langfe1053\langnp2057\insrsid12806715 [if(ip == \'93127.0.0.1\'94) -> Administrative access}{
\lang2057\langfe1053\langnp2057\insrsid4210788 ?}{\lang2057\langfe1053\langnp2057\insrsid12806715 ]}{\lang2057\langfe1053\langnp2057\insrsid3624634 
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 Server Flags

\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 ISSERVER
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
This flag is set in _world if the OL instance is a server. This may be done at any and should disable normal entity processes, making them work as they would in a server instead.
\par The MULTIPLAYER flag must be set for this flag to work.
\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
ISSERVERANDCLIENT
\par }\pard\plain \s5\ql \li5216\ri0\sb240\sa60\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin5216\itap0\ipgp1 \b\i\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
This would be equal to a non-dedicated server, which would allow playing and hosting at the same time. (Diablo 2, anyone?)
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 The Client

\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
When a multiplayer quest is loaded into OL, the MULTIPLAYER tag should be intercepted. The actual connection shouldn\rquote t be made until CreateConnection(); is called.
\par The start screen should probably be in a group that is otherwise unused, so that the login will have as little interaction as possible with the server.
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 The Server

\par }\pard\plain \s4\ql \li3912\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin3912\itap0\ipgp1 \b\fs28\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
The server should use the same .qst file as the client. 
\par The ISSERVER flag, alternatively the ISSERVERANDCLIENT flag should be used for a server. 
\par The server itself can be initiated inside the quest using scripts.
\par THERE MAY BE A FUTURE NEED FOR AN ENTITY DATABASE STORED SEPARATED FROM THE ACTUAL QUEST, FOR USAGE IN QUESTS USING SERVER CLUSTERS.
\par }\pard\plain \s3\ql \li2608\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin2608\itap0\ipgp1 \b\f1\fs26\lang1053\langfe1053\cgrid\langnp1053\langfenp1053 {\lang2057\langfe1053\langnp2057\insrsid12806715 
Data sent will probably require some kind of encryption.
\par As far as I can see it, the above methods would create the e
asiest possible methods for maintaining an online quest through entities and scripting. It will still require separate quest packs to maintain consistency, it will also require scripting to work as intended.
\par }}